/* 
--------------------------------------------
1. COLORES EN CSS
--------------------------------------------
- Los colores son una parte fundamental del diseño web.
- CSS permite definir colores para textos, fondos, bordes y otros elementos.
*/

/* 
--------------------------------------------
2. FORMATOS DE COLOR
--------------------------------------------
- CSS soporta varios formatos para definir colores:
  1. Nombres de color: red, blue, green, etc.
  2. Valores Hexadecimales: #RRGGBB o #RGB.
  3. Valores RGB: rgb(255, 0, 0).
  4. Valores RGBA: rgba(255, 0, 0, 0.5).
  5. Valores HSL: hsl(0, 100%, 50%).
  6. Valores HSLA: hsla(0, 100%, 50%, 0.5).
*/

/* Ejemplo: Nombres de color */
h1 {
    color: red; /* Aplica un color rojo al texto del h1 */
}

/* Ejemplo: Hexadecimal */
h2 {
    color: #3498db; /* Azul claro */
}

/* Ejemplo: RGB */
p {
    color: rgb(34, 139, 34); /* Verde oscuro */
}

/* Ejemplo: RGBA */
div {
    background-color: rgba(255, 0, 0, 0.5); /* Rojo translúcido */
}

/* Ejemplo: HSL */
section {
    background-color: hsl(120, 100%, 25%); /* Verde oscuro */
}

/* Ejemplo: HSLA */
footer {
    background-color: hsla(240, 100%, 50%, 0.7); /* Azul translúcido */
}

/* 
--------------------------------------------
3. GRADIENTES
--------------------------------------------
- Los gradientes permiten crear transiciones suaves entre colores.
- Tipos:
  1. Lineal: linear-gradient().
  2. Radial: radial-gradient().
  3. Cónico: conic-gradient().
- Nota: Los gradientes complejos pueden afectar el rendimiento si se aplican en grandes cantidades o a elementos animados.
*/

/* Gradiente lineal */
body {
    background: linear-gradient(to right, red, yellow);
}

/* Gradiente radial */
.box {
    background: radial-gradient(circle, red, yellow, green);
}

/* Gradiente cónico */
.circle {
    background: conic-gradient(from 0deg, red, yellow, green);
}

/* 
--------------------------------------------
4. OPACIDAD
--------------------------------------------
- La propiedad opacity define la transparencia de un elemento.
- Valores: De 0 (completamente transparente) a 1 (completamente opaco).
- Nota: Opacity afecta tanto al fondo como al contenido interno del elemento. 
  Si solo se desea afectar el fondo, usa colores RGBA o HSLA.
*/

img {
    opacity: 0.7; /* Imagen semi-transparente */
}

/* Ejemplo alternativo con RGBA */
.overlay {
    background-color: rgba(0, 0, 0, 0.5); /* Fondo negro translúcido */
    color: white; /* Texto sin afectar */
}

/* 
--------------------------------------------
5. COLORES PERSONALIZADOS CON VARIABLES CSS
--------------------------------------------
- CSS permite definir variables para reutilizar colores.
- Sintaxis:
  1. Declaración: --nombre-variable: valor.
  2. Uso: var(--nombre-variable).
*/

:root {
    --color-principal: #3498db;
    --color-secundario: #2ecc71;
    --color-fondo: #ecf0f1;
}

header {
    background-color: var(--color-principal);
    color: var(--color-fondo);
}

button {
    background-color: var(--color-secundario);
    color: var(--color-fondo);
}

/* Ejemplo avanzado: Variables en gradientes */
.card {
    background: linear-gradient(to bottom, var(--color-principal), var(--color-secundario));
    padding: 20px;
    border-radius: 10px;
}

/* 
--------------------------------------------
6. EJEMPLOS PRÁCTICOS
--------------------------------------------
*/

/* Fondo degradado para botones */
button.gradient {
    background: linear-gradient(to bottom, #3498db, #2980b9);
    border: none;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
}

/* Color de texto según el estado */
a {
    color: #2980b9;
    text-decoration: none;
}

a:hover {
    color: #3498db; /* Cambia el color cuando el ratón pasa por encima */
}

/* Ejemplo adicional: Lista con colores alternos */
ul.lista-alterna > li:nth-child(odd) {
    background-color: var(--color-principal);
    color: white;
}

ul.lista-alterna > li:nth-child(even) {
    background-color: var(--color-secundario);
    color: white;
}

/* 
--------------------------------------------
7. COMPATIBILIDAD Y BUENAS PRÁCTICAS
--------------------------------------------
- Algunas propiedades modernas, como conic-gradient, requieren navegadores actualizados.
- Siempre verifica compatibilidad usando herramientas como "Can I Use".
- Usa variables CSS para facilitar mantenimiento y cambios globales.
*/
